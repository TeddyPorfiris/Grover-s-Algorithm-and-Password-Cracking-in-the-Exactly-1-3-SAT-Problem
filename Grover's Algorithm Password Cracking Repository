import hashlib

y = '5f4dcc3b5aa765d61d8327deb882cf99'
potential_passwords = ["dog", "$WeTheNorth$", "1234", "steve", "password", "ILovePiano", "PYTHON", "HaPiNeSs"]
#Passes each password in potential_passwords through a hash function, and then binarizes them

def main():
    phash1 = "dog"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash = main()
' '.join(format(ord(x), 'b') for x in mainHash)

def main2():
    phash1 = "$WeTheNorth$"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash2 = main2()
' '.join(format(ord(x), 'b') for x in mainHash2)

def main3():
    phash1 = "1234"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash3 = main3()
' '.join(format(ord(x), 'b') for x in mainHash3)


def main4():
    phash1 = "steve"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash4 = main4()
' '.join(format(ord(x), 'b') for x in mainHash4)


def main5():
    phash1 = "password"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash5 = main5()
' '.join(format(ord(x), 'b') for x in mainHash5)


def main6():
    phash1 = "ILovePiano"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash6 = main6()
' '.join(format(ord(x), 'b') for x in mainHash6)


def main7():
    phash1 = "PYTHON"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash7 = main7()
' '.join(format(ord(x), 'b') for x in mainHash7)


def main8():
    phash1 = "HaPiNeSs"
    phash1done = phash1.encode()
    hash = hashlib.md5( phash1done )
    hexa = hash.hexdigest()
    return hexa 
	
mainHash8 = main8()
' '.join(format(ord(x), 'b') for x in mainHash8)

#store each binarized hashed string as a certian variable

binary = ' '.join(format(ord(x), 'b') for x in mainHash)
binary2 = ' '.join(format(ord(x), 'b') for x in mainHash2)
binary3 = ' '.join(format(ord(x), 'b') for x in mainHash3)
binary4 = ' '.join(format(ord(x), 'b') for x in mainHash4)
binary5 = ' '.join(format(ord(x), 'b') for x in mainHash5)
binary6 = ' '.join(format(ord(x), 'b') for x in mainHash6)
binary7 = ' '.join(format(ord(x), 'b') for x in mainHash7)
binary8 = ' '.join(format(ord(x), 'b') for x in mainHash8)

#take the final three digits from the first section of each binarized hashed string

#first isolate the first section of each binarized hashed string

split_threads_string = binary.split(' ')
split_threads_string2 = binary2.split(' ')
split_threads_string3 = binary3.split(' ')
split_threads_string4 = binary4.split(' ')
split_threads_string5 = binary5.split(' ')
split_threads_string6 = binary6.split(' ')
split_threads_string7 = binary7.split(' ')
split_threads_string8 = binary8.split(' ')

#then out of the first section, get the final three digits by getting rid of the first three (it can be any number in the square brakets when we print except 0 because we are dealing with the final digits, not the first, so the numbers can either be 1 or -1) 

final = split_threads_string[0]
thefinal = final.split('000')
print(thefinal[-1])

final2 = split_threads_string2[0]
thefinal2 = final2.split('001')
print(thefinal2[-1])

final3 = split_threads_string3[0]
thefinal3 = final3.split('010')
print(thefinal3[-1])

final4 = split_threads_string4[0]
thefinal4 = final4.split('100')
print(thefinal4[-1])

final5 = split_threads_string5[0]
thefinal5 = final5.split('110')
print(thefinal5[-1])

final6 = split_threads_string6[0]
thefinal6 = final6.split('011')
print(thefinal6[-1])

final7 = split_threads_string7[0]
thefinal7 = final7.split('101')
print(thefinal7[-1])

final8 = split_threads_string8[0]
thefinal8 = final8.split('111')
print(thefinal8[-1])

#assign the final 3-digit value back to the original hashed version of that password

thefinal[-1] = '06d80eb0c50b49a509b49f2424e8c805'

thefinal2[-1] = '18794dba48c7b32130c578753f9ebcdf'

thefinal3[-1] = '81dc9bdb52d04dc20036dbd8313ed055'

thefinal4[-1] = 'd69403e2673e611d4cbd3fad6fd1788e'

thefinal5[-1] = '5f4dcc3b5aa765d61d8327deb882cf99'

thefinal6[-1] = '6e184a2331c04168c94f111ffa86a0b6'

thefinal7[-1] = '0aff891c0d43dc127e64bbc28a4ec4e8'

thefinal8[-1] = '9cf448e47c85b3f6e038fa98f02d291f'

thefinals = [thefinal[-1], thefinal2[-1], thefinal3[-1], thefinal4[-1], thefinal5[-1], thefinal6[-1], thefinal7[-1], thefinal8[-1]]


#PERFORM GROVER'S ALGORITHM

#first check to see if any of the 3-digit passwords correspond to y, the desired hashed password

def solveIt():
    for x in thefinals:
        if x == y:
            return 1

print(solveIt())

#perform inversion about the average 

import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# importing Qiskit
from qiskit import BasicAer, IBMQ
from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister, execute, compile
from qiskit.tools.visualization import plot_histogram

def n_controlled_Z(circuit, controls, target):
    """Implement a Z gate with multiple controls"""
    if (len(controls) > 2):
        raise ValueError('The controlled Z with more than 2 ' +
                         'controls is not implemented')
    elif (len(controls) == 1):
        circuit.h(target)
        circuit.cx(controls[0], target)
        circuit.h(target)
    elif (len(controls) == 2):
        circuit.h(target)
        circuit.ccx(controls[0], controls[1], target)
        circuit.h(target)
# -- end function

def inversion_about_average(circuit, f_in, n):
    """Apply inversion about the average step of Grover's algorithm."""
    # Hadamards everywhere
    for j in range(n):
        circuit.h(f_in[j])
    # D matrix: flips the sign of the state |000> only
    for j in range(n):
        circuit.x(f_in[j])
    n_controlled_Z(circuit, [f_in[j] for j in range(n-1)], f_in[n-1])
    for j in range(n):
        circuit.x(f_in[j])
    # Hadamards everywhere again
    for j in range(n):
        circuit.h(f_in[j])
# -- end function


#perform the whole grover's algorithm

def input_state(circuit, f_in, f_out, n):
    """(n+1)-qubit input state for Grover search."""
    for j in range(n):
        circuit.h(f_in[j])
    circuit.x(f_out)
    circuit.h(f_out)
# -- end function

# Make a quantum program for the n-bit Grover search.
n = 3

# Exactly-1 3-SAT formula to be satisfied, in conjunctive
# normal form. We represent literals with integers, positive or
# negative, to indicate a Boolean variable or its negation.
exactly_1_3_sat_formula = [[1, 2, -3], [-1, -2, -3], [-1, 2, 3]]

# Define three quantum registers: 'f_in' is the search space (input
# to the function f), 'f_out' is bit used for the output of function
# f, aux are the auxiliary bits used by f to perform its
# computation.
f_in = QuantumRegister(n)
f_out = QuantumRegister(1)
aux = QuantumRegister(len(exactly_1_3_sat_formula) + 1)

# Define classical register for algorithm result
ans = ClassicalRegister(n)

# Define quantum circuit with above registers
grover = QuantumCircuit()
grover.add_register(f_in)
grover.add_register(f_out)
grover.add_register(aux)
grover.add_register(ans)

input_state(grover, f_in, f_out, n)
T = 2
for t in range(T):
    # Apply T full iterations
    black_box_u_f(grover, f_in, f_out, aux, n, exactly_1_3_sat_formula)
    inversion_about_average(grover, f_in, n)

# Measure the output register in the computational basis
for j in range(n):
    grover.measure(f_in[j], ans[j])

# Execute circuit
backend = BasicAer.get_backend('qasm_simulator')
job = execute([grover], backend=backend, shots=1000)
result = job.result()

# Get counts and plot histogram
counts = result.get_counts(grover)
plot_histogram(counts)


#End Algorithm
